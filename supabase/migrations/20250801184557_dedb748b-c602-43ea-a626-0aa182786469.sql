
-- Crear tabla de perfiles de usuario
CREATE TABLE public.user_profiles (
  id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  email TEXT,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  PRIMARY KEY (id)
);

-- Habilitar RLS para user_profiles
ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;

-- Pol√≠ticas para user_profiles
CREATE POLICY "Users can view their own profile" 
  ON public.user_profiles 
  FOR SELECT 
  USING (auth.uid() = id);

CREATE POLICY "Users can insert their own profile" 
  ON public.user_profiles 
  FOR INSERT 
  WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update their own profile" 
  ON public.user_profiles 
  FOR UPDATE 
  USING (auth.uid() = id);

-- Crear tabla de pacientes
CREATE TABLE public.patients (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  dni TEXT,
  phone TEXT,
  age TEXT,
  email TEXT,
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Habilitar RLS para patients
ALTER TABLE public.patients ENABLE ROW LEVEL SECURITY;

-- Pol√≠ticas para patients
CREATE POLICY "Users can view their own patients" 
  ON public.patients 
  FOR SELECT 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own patients" 
  ON public.patients 
  FOR INSERT 
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own patients" 
  ON public.patients 
  FOR UPDATE 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own patients" 
  ON public.patients 
  FOR DELETE 
  USING (auth.uid() = user_id);

-- Crear tabla de consultas
CREATE TABLE public.consultations (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  patient_id UUID REFERENCES public.patients(id) ON DELETE CASCADE,
  patient_name TEXT NOT NULL,
  date_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  audio_url TEXT,
  transcription TEXT,
  summary TEXT,
  patient_data JSONB,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Habilitar RLS para consultations
ALTER TABLE public.consultations ENABLE ROW LEVEL SECURITY;

-- Pol√≠ticas para consultations
CREATE POLICY "Users can view their own consultations" 
  ON public.consultations 
  FOR SELECT 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own consultations" 
  ON public.consultations 
  FOR INSERT 
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own consultations" 
  ON public.consultations 
  FOR UPDATE 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own consultations" 
  ON public.consultations 
  FOR DELETE 
  USING (auth.uid() = user_id);

-- Crear tabla de prompts para el sistema de IA
CREATE TABLE public.prompts (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  name TEXT NOT NULL,
  content TEXT NOT NULL,
  active BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Habilitar RLS para prompts (acceso p√∫blico de lectura)
ALTER TABLE public.prompts ENABLE ROW LEVEL SECURITY;

-- Pol√≠ticas para prompts
CREATE POLICY "Anyone can read active prompts" 
  ON public.prompts 
  FOR SELECT 
  USING (active = true);

-- Crear tabla de logs de la aplicaci√≥n
CREATE TABLE public.app_logs (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id),
  level TEXT NOT NULL,
  source TEXT NOT NULL,
  message TEXT NOT NULL,
  details JSONB,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Habilitar RLS para app_logs
ALTER TABLE public.app_logs ENABLE ROW LEVEL SECURITY;

-- Pol√≠ticas para app_logs
CREATE POLICY "Users can view their own logs" 
  ON public.app_logs 
  FOR SELECT 
  USING (auth.uid() = user_id OR user_id IS NULL);

CREATE POLICY "Anyone can insert logs" 
  ON public.app_logs 
  FOR INSERT 
  WITH CHECK (true);

-- Crear funci√≥n para manejar nuevos usuarios
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  INSERT INTO public.user_profiles (id, email)
  VALUES (new.id, new.email);
  RETURN new;
END;
$$;

-- Crear trigger para crear perfil autom√°ticamente
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Funci√≥n para logging
CREATE OR REPLACE FUNCTION public.log(
  p_user_id UUID,
  p_level TEXT,
  p_source TEXT,
  p_message TEXT,
  p_details JSONB DEFAULT NULL
)
RETURNS UUID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  v_log_id UUID;
BEGIN
  INSERT INTO public.app_logs (user_id, level, source, message, details)
  VALUES (p_user_id, p_level, p_source, p_message, p_details)
  RETURNING id INTO v_log_id;
  
  RETURN v_log_id;
END;
$$;

-- Insertar prompt por defecto para el sistema de transcripci√≥n
INSERT INTO public.prompts (name, content, active) VALUES (
  'transcription_summary',
  'Eres un asistente m√©dico especializado en documentaci√≥n cl√≠nica. A partir de la siguiente transcripci√≥n de una consulta m√©dica, extrae y resume la informaci√≥n cl√≠nica relevante utilizando terminolog√≠a m√©dica t√©cnica y profesional, siguiendo una estructura estandarizada.

‚ö†Ô∏è IMPORTANTE: Si en la transcripci√≥n se mencionan datos personales del paciente, deben ser incluidos en su totalidad y sin omisiones:

Nombre completo
DNI
Tel√©fono
Correo electr√≥nico
Edad
Domicilio
G√©nero
Nivel educativo (escolaridad)
Ocupaci√≥n
Obra social
Procedencia

üßæ ESTRUCTURA DEL RESUMEN (usa estos t√≠tulos en este orden exacto):

DATOS PERSONALES: Todos los datos identificatorios mencionados.

MOTIVO DE CONSULTA: Raz√≥n principal de la consulta expresada en t√©rminos t√©cnicos y precisos.

ANTECEDENTES PERSONALES: Enfermedades cr√≥nicas del adulto, internaciones previas, cirug√≠as, alergias, antecedentes traum√°ticos, medicaci√≥n habitual, y esquema de vacunaci√≥n si se menciona.

ANTECEDENTES FAMILIARES: Enfermedades relevantes en familiares de primer o segundo grado (ej. hipertensi√≥n, diabetes, c√°ncer, enfermedades hereditarias).

H√ÅBITOS: Consumo de tabaco (indicar en paq/a√±o), alcohol (indicar en g/d√≠a), otras sustancias si se mencionan.

EX√ÅMENES COMPLEMENTARIOS PREVIOS:

Laboratorio: Presentar valores relevantes en una tabla clara con las siguientes columnas:
| Par√°metro | Resultado | Valor de referencia |

Otros estudios: Incluir resultados de im√°genes (radiograf√≠as, ecograf√≠as, TAC, RMN, etc.) o procedimientos (endoscop√≠as, EKG, etc.) si se mencionan.

DIAGN√ìSTICO PRESUNTIVO: Hip√≥tesis diagn√≥stica basada en la anamnesis y examen f√≠sico, con t√©rminos m√©dicos adecuados.

INDICACIONES: Detalle del plan terap√©utico (medicaci√≥n, dosis, frecuencia), medidas no farmacol√≥gicas y otras recomendaciones.

EX√ÅMENES SOLICITADOS: Estudios complementarios solicitados durante la consulta.

‚úÖ S√© conciso pero completo. Evita redundancias, pero no omitas datos cl√≠nicamente significativos. Siempre que se reporten valores de laboratorio, pres√©ntalos en formato de tabla. Usa nomenclatura m√©dica estandarizada en todo el resumen.',
  true
);
